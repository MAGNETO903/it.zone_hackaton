# backend/Dockerfile

# 1. Базовый образ Python
# Используем официальный образ Python. Выбери версию, соответствующую твоему проекту.
# slim-bullseye - хороший компромисс между размером и наличием нужных библиотек.
FROM python:3.10-slim-bullseye

# 2. Установка рабочей директории внутри контейнера
WORKDIR /app

# 3. Установка зависимостей ОС (если нужны, например, для сборки некоторых Python пакетов)
# RUN apt-get update && apt-get install -y --no-install-recommends gcc

# 4. Копирование файла зависимостей и установка Python пакетов
# Сначала копируем только requirements.txt, чтобы использовать кеширование Docker слоев.
# Если requirements.txt не изменился, Docker не будет переустанавливать зависимости.
COPY requirements.txt .
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt

# 5. Копирование всего остального кода приложения
COPY . .

# 6. Переменные окружения (если нужны при сборке или по умолчанию)
# Например, если BASE_EXPORT_URL должен быть доступен во время сборки, но лучше передавать его при запуске.
# ENV GROQ_API_KEY=your_default_key_if_any # НЕ РЕКОМЕНДУЕТСЯ для ключей API
# ENV BASE_EXPORT_URL="http://localhost:8000" # Пример, будет перезаписан при запуске контейнера

# 7. Открытие порта, который слушает FastAPI
EXPOSE 8000

# 8. Команда для запуска приложения
# Используем uvicorn для запуска FastAPI.
# "main:app" -- `main` это имя твоего python файла (main.py), `app` -- имя экземпляра FastAPI в этом файле.
# --host 0.0.0.0 -- чтобы приложение было доступно извне контейнера.
# --port 8000 -- порт внутри контейнера.
# --reload будет работать только если код монтируется в контейнер, для продакшена обычно не используется.
# Для продакшена лучше использовать gunicorn с uvicorn воркерами, но для хакатона этого достаточно.
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]